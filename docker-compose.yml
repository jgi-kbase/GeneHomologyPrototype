version: "3.1"
# This is just an example that shows the relationships between the gene_homology image
# and other services. Many of these things would be overidden in the actual
# deployment docker-compose file - for example, the name of the mongodb instance
# that is started up and polled

# Note that for now, the prototype service doesn't need MongoDB to run, although it probably will
# in the future
services:
  gene_homology:
    image: kbase/gene_homology:latest
    ports:
      - "8080:8080"
    volumes:
      - /media/mongohd/genehom/LAST/:/LASTmount
    environment:
      - GENE_HOMOLOGY_CONFIG=/kb/deployment/conf/deployment.cfg
      - namespace_yaml_file=/LASTmount/namespacetest.yaml
      - last_prj_file=/LASTmount/uniref50_40Mlines.last.prj
    command:
#      - "-wait"
#      - "tcp://ci-mongo:27017"
#      - "-wait"
#      - "tcp://mongoinit:8080"
#      - "-timeout"
#      - "120s"
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "java"
      - "-Djetty.home=/usr/local/jetty"
      - "-jar"
      - "/usr/local/jetty/start.jar"
      # If you needed to pass in context for template evaluation you would put something like
      # these lines that tell dockerize to hit github for an INI style file for the context
    # - "-env"
    # - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/tauth2-minikb.yml"
      # If the -env URL needs authentication you would use an -env-header directive that specified
      # either the hard coded string for the header, or a path to a file that contains the header
      # string ( used for working with docker secrets files)
    # - "-env-header"
    # - "AUTHORIZATION:authtokenvalue"
      # or for a path to a secrets file:
    # - "env-header"
    # - "/run/secrets/authheader"
      # If your server is using self-signed certs, or otherwise problematic for cert validation
      # you can add the following flag:
    # - "-validateCert=false"
#    depends_on: ["ci-mongo", "mongoinit"]

#  mongoinit:
#    image: kbase/db_initialize:latest
#    entrypoint:
#      - "/kb/deployment/bin/dockerize.sh"
#      - "-wait"
#      - "tcp://ci-mongo:27017"
#      - "-timeout"
#      - "120s"
#    depends_on: [ "ci-mongo" ]
  
#  ci-mongo:
#    image: mongo:2
#    command:
#      - "--smallfiles"
#    ports:
#      - "27017:27017"

